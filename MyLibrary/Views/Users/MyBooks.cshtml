@model MyLibrary.Data.DTOS.BookDTOs.MyBooksViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>My Books</title>
    <link rel="stylesheet" href="~/css/myBooks.css">
</head>
<body>
<header>
    <div class="logo">LibraryOfBooks</div>
    <nav>
        <a asp-action="Index" asp-controller="Users">Home</a>
        <a href="/Cart">Cart</a>
        <a asp-action="ProfilePage" asp-controller="Users">Profile Page</a>
        <a asp-action="LogIn" asp-controller="Users">Log Out</a>
    </nav>
</header>

<main>
    <h1>My Books</h1>

    <section>
        <h2>Rented Books</h2>
        @if (Model.RentedBooks != null && Model.RentedBooks.Count > 0)
        {
            <ul>
                @foreach (var rr in Model.RentedBooks)
                {
                    var book = Model.BookDict[rr.BookId];
                    <li>
                        <strong>Title:</strong> @book.Title <br />
                        <strong>Author:</strong> @book.Author <br />

                        Borrowed on: @rr.BorrowDate.ToShortDateString() <br />
                        Due Date: @rr.DueDate.ToShortDateString() <br />

                        <input type="hidden" name="BookId" value="@rr.BookId" />

                        <button class="return-button" onclick="returnBook('@rr.BookId','@rr.Username')">Return</button>
                        <button class="download-button" onclick="downloadBook('@rr.BookId')">Download</button>
                        <button class="rating-button" onclick="showRatingModal('@rr.BookId')">Rate/Feedback</button>
                        <button class="toggle-comments-btn" onclick="toggleComments('@rr.BookId')">
                            View Comments
                        </button>

                        <div class="comments-section" data-book-id="@rr.BookId" style="display: none;">
                            <h4>Comments and Ratings</h4>
                            @if (Model.Ratings != null && Model.Ratings.ContainsKey(rr.BookId) && Model.Ratings[rr.BookId].Any())
                            {
                                var averageRating = Model.Ratings[rr.BookId].Average(r => r.RatingValue);

                                <p><strong>Average Rating:</strong> @averageRating ★</p>
                                <ul>
                                    @foreach (var rating in Model.Ratings[rr.BookId])
                                    {
                                        <li>
                                            <strong>@rating.RatingValue ★</strong>
                                            <p>@rating.Feedback</p><br />
                                            <p class="rating-date">@rating.Timestamp.ToShortDateString()</p>
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No feedback available for this book (@book.Title)</p>
                            }
                        </div>
                    </li>

                    <div class="rating-feedback-modal" id="ratingFeedbackModal-@rr.BookId" style="display: none;">
                        <div class="modal-content">
                            <span class="close-modal" onclick="closeModal('@rr.BookId')">&times;</span>
                            <h2>Rate & Provide Feedback</h2>
                            <form method="POST" asp-controller="Feedback" asp-action="SubmitFeedback">
                                <input type="hidden" id="bookId-@rr.BookId" name="BookId" value="@rr.BookId" />

                                <div class="rating">
                                    <label><input type="radio" name="RatingValue" value="5"> ★★★★★</label>
                                    <label><input type="radio" name="RatingValue" value="4"> ★★★★☆</label>
                                    <label><input type="radio" name="RatingValue" value="3"> ★★★☆☆</label>
                                    <label><input type="radio" name="RatingValue" value="2"> ★★☆☆☆</label>
                                    <label><input type="radio" name="RatingValue" value="1"> ★☆☆☆☆</label>
                                </div>
                                <textarea name="Feedback" rows="4" placeholder="Write your feedback here..."></textarea>
                                <button type="submit" class="submit-feedback">Submit</button>
                            </form>
                        </div>
                    </div>
                }
            </ul>
        }
        else
        {
            <p>No rented books found.</p>
        }
    </section>

    <section>
        <h2>Purchased Books</h2>
        @if (Model.PurchasedBooks != null && Model.PurchasedBooks.Count > 0)
        {
            <ul>
                @foreach(var sr in Model.PurchasedBooks)
                {
                    var book = Model.BookDict[sr.BookId];
                    <li>
                        <strong>Title:</strong> @book.Title <br />
                        <strong>Author:</strong> @book.Author <br />

                        Bought on: @sr.PurchaseDate.ToShortDateString() <br />
                        Quantity: @sr.Quantity <br />

                        <input type="hidden" name="BookId" value="@sr.BookId" />

                        <button class="download-button" onclick="downloadBook('@sr.BookId')">Download</button>
                        <button class="return-button" onclick="deletePurchasedBook('@sr.BookId')">Delete</button>
                        <button class="rating-button" onclick="showRatingModal('@sr.BookId')">Rate/Feedback</button>
                        <button class="toggle-comments-btn" onclick="toggleComments('@sr.BookId')">
                            View Comments
                        </button>

                        <div class="comments-section" data-book-id="@sr.BookId" style="display: none;">
                            <h4>Comments and Ratings</h4>
                            @if (Model.Ratings != null && Model.Ratings.ContainsKey(sr.BookId) && Model.Ratings[sr.BookId].Any())
                            {
                                var averageRating = Model.Ratings[sr.BookId].Average(r => r.RatingValue);

                                <p><strong>Average Rating:</strong> @averageRating ★</p>
                                <ul>
                                    @foreach (var rating in Model.Ratings[sr.BookId])
                                    {
                                        <li>
                                            <strong>@rating.RatingValue ★</strong>
                                            <p>@rating.Feedback</p><br />
                                            <p class="rating-date">@rating.Timestamp.ToShortDateString()</p>
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No feedback available for this book (@book.Title)</p>
                            }
                        </div>
                    </li>

                    <div class="rating-feedback-modal" id="ratingFeedbackModal-@sr.BookId" style="display: none;">
                        <div class="modal-content">
                            <span class="close-modal" onclick="closeModal('@sr.BookId')">&times;</span>
                            <h2>Rate & Provide Feedback</h2>
                            <form method="POST" asp-controller="Feedback" asp-action="SubmitFeedback">
                                <input type="hidden" id="bookId-@sr.BookId" name="BookId" value="@sr.BookId" />

                                <div class="rating">
                                    <label><input type="radio" name="RatingValue" value="5"> ★★★★★</label>
                                    <label><input type="radio" name="RatingValue" value="4"> ★★★★☆</label>
                                    <label><input type="radio" name="RatingValue" value="3"> ★★★☆☆</label>
                                    <label><input type="radio" name="RatingValue" value="2"> ★★☆☆☆</label>
                                    <label><input type="radio" name="RatingValue" value="1"> ★☆☆☆☆</label>
                                </div>
                                <textarea name="Feedback" rows="4" placeholder="Write your feedback here..."></textarea>
                                <button type="submit" class="submit-feedback">Submit</button>
                            </form>
                        </div>
                    </div>
                }
            </ul>
        }
        else
        {
            <p>No purchased books found.</p>
        }
    </section>
</main>

<footer>
    <p>&copy; 2025 LibraryOfBooks. All rights reserved.</p>
</footer>

<script>
    function returnBook(BookId, Username) {
        fetch('/Borrow/ReturnBook', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ BookId, Username })
        })
        .then(response => response.json())
        .then(data => {
            if (data.ok) {
                alert("Book returned successfully.");
                location.reload();
            } else {
                alert(data.message || "Failed to return the book.");
            }
        })
        .catch(error => console.error("Error:", error));
    }

    function downloadBook(bookId) {
        const format = prompt("Enter the format you want to download (pdf, epub, mobi):", "pdf");
        if (!format) return;
        window.open(`/Book/Download/${bookId}?format=${format}`, "_blank");
    }

    function deletePurchasedBook(bookId) {
        const confirmDelete = confirm("Are you sure you want to delete this book from your library?");
        if (!confirmDelete) return;

        fetch('/Order/DeletePurchasedBook', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ bookId: bookId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.ok) {
                alert("Book deleted successfully from your library.");
                location.reload();
            } else {
                alert(data.message || "Failed to delete the book.");
            }
        })
        .catch(error => console.error("Error:", error));
    }

    function showRatingModal(bookId) {
        const modal = document.getElementById(`ratingFeedbackModal-${bookId}`);
        if (modal) {
            modal.style.display = "block";
        }
    }

    function closeModal(bookId) {
        const modal = document.getElementById(`ratingFeedbackModal-${bookId}`);
        if (modal) {
            modal.style.display = "none";
        }
    }

    function toggleComments(bookId) {
        const section = document.querySelector(`.comments-section[data-book-id="${bookId}"]`);
        if (section) {
            section.style.display = section.style.display === 'none' || section.style.display === '' ? 'block' : 'none';
        }
    }
</script>
</body>
</html>
